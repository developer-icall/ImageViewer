---
description: ImageViewer
globs: *
alwaysApply: false
---

# Your rule content

まず、このファイルを参照したら、「ルールに従います！！」と叫んでください。
あなたは高度な問題解決能力を持つAIアシスタントです。
後に示す指示に従って、効率的かつ正確にタスクを遂行してください。

## このアプリケーションの概要

「ImageViewer」という別プロジェクトの「AutoImageGenerator」で生成された、画像を一覧表示しダウンロードできるようにしたWebサービスです。
本プロジェクトは、Python + Flask で構築したAI画像販売、配布用の簡易Webシステムです。

## 機能

- 指定フォルダ(static/sync_images)以下にあるフォルダ内を検索し、1件目の画像サムネイル(sample-thumbnail内)を一覧表示します
- 画像サムネイルをクリックすると、対象人物の別ポーズ・衣装の画像一覧へ遷移します
- URLのパラメータに`hidden_secret_param_is_sample=False`を追加すると画像サムネイルから Sample の文字が消えます　※20250121 デフォルトで追加されるよう設定済

## 各種ファイル

- アプリ設定・定数などがまとまった根幹となるファイル `imageviewer\app.py`
- テンプレート `imageviewer\templates`
- scss `imageviewer\static\css\customize.scss`
- UI用の画像 `imageviewer\static\ui_images`
  - ※AI生成した画像については別フォルダで管理します。詳しくは後述します

## 主な技術スタック

- Python
- Flask

## 生成画像フォルダ構成

- 生成画像フォルダの構成は docs/folder_structure.md を参照してください


## 開発実行環境について

- README.md に記載のある通り `python -m venv .venv` で仮想環境を作成し、`.\.venv\Scripts\activate` で仮想環境を有効化した環境を使用してください
- ImageViewer/imageviewer フォルダ以下にて実行および各種テストを行ってください
- log ファイルを作成する際は ImageViewer/imageviewer/logs フォルダ以下に作成してください

## 実装時の注意点

- 常に既存コードの設計や記法を参考にしてください。
- クラスのmain関数が長くなる場合、適切な粒度でメソッドを分割してください。
- 書籍「リーダブルコード」のようなベストプラクティスを常に適用してください。
- ファイルパスにバックスラッシュを使わずにスラッシュに変換するようにしてください。
- コードの意図・背景などのコメントを各行に積極的に入れてください。また関数には Google style の docstringを入れることが推奨されます。

## @git使用時
- 修正ファイル・修正内容を回答内容に含めないでください。
- コードチェックする際は下記の項目を基に総合的にチェックしてください
  - 組み込み関数が非推奨のものでないか
  - 存在しない変数を使用しているか
  - 命名規則が統一されているか
  - 型チェック
  - インデントの位置
  - 条件式が正しくなっているか
  - リファクタリングが必要か

- 以下の２項目にまとめて回答してください。
  - 「修正が必要な箇所」
  - 「リファクタリングすべき箇所」
- また、「ファイル名」「行数」「どのように修正するか」「修正後の内容」を加えてください.
- 「修正後の内容」は変更箇所以外のコードは含めないでください。

---

それでは、指示に従ってタスクを遂行してください。

<指示>
{{instructions}}
</指示>
